using System.Runtime.InteropServices;

namespace Seminar12
{
    public partial class Form1 : Form
    {
        int height, width;
        List<PointF> triangle;
        const int radius = 3;
        PointF center;
        public Form1()
        {
            InitializeComponent();
            triangle = new List<PointF>();
            height = ClientSize.Height;
            width = ClientSize.Width;
            center = new PointF(width / 2, height / 2);



        }

        private void Form1_Click(object sender, EventArgs e)
        {
            PointF newPoint = this.PointToClient(Form1.MousePosition);
            triangle.Add(newPoint);
            if (triangle.Count > 3)
            {
                triangle.RemoveAt(0);
            }
            if (triangle.Count == 3)
            {
                PointF p1 = triangle[0];
                PointF p2 = triangle[1];
                PointF p3 = triangle[2];
                center = Circumcenter(p1, p2, p3);
            }
            Invalidate();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            height = ClientSize.Height;
            width = ClientSize.Width;
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            #region plot points
            {

                for (int i = 0; i < triangle.Count; i++)
                {
                    PointF p = triangle[i];
                    float x = p.X;
                    float y = p.Y;
                    g.DrawEllipse(Pens.Navy, x - radius, y - radius, 2 * radius, 2 * radius);
                    string text = (i + 1).ToString();
                    g.DrawString(text, this.Font, Brushes.Navy, x - radius, y + radius);
                }
            }
            #endregion
            #region draw triangle sides
            if (triangle.Count > 1)
            {
                for (int i = 0; i < triangle.Count; i++)
                {
                    int i1 = i;
                    int i2 = (i + 1 < triangle.Count) ? (i + 1) : 0;
                    PointF p1 = triangle[i1];
                    PointF p2 = triangle[i2];
                    g.DrawLine(Pens.Navy, p1, p2);
                }
            }
            #endregion
            #region plot circumcenter
            if (triangle.Count == 3)
            {
                g.DrawEllipse(Pens.Red, center.X - radius, center.Y - radius, 2 * radius, 2 * radius);
            }
            #endregion
            #region draw circumcircle
            if (triangle.Count == 3)
            {
                float dx = triangle[0].X - center.X;
                float dy = triangle[0].Y - center.Y;
                float radiusCircle = (float)Math.Sqrt(dx * dx + dy * dy);

                g.DrawEllipse(Pens.OrangeRed,
                    center.X - radiusCircle,
                    center.Y - radiusCircle,
                    2 * radiusCircle,
                    2 * radiusCircle);
            }
            #endregion
            #region draw perpendicular bisectors (Voronoi edges)
            if (triangle.Count == 3)
            {
                PointF[] p = triangle.ToArray();

                for (int i = 0; i < 3; i++)
                {
                    PointF a = p[i];
                    PointF b = p[(i + 1) % 3];

                    // Midpoint of side ab
                    float mx = (a.X + b.X) / 2;
                    float my = (a.Y + b.Y) / 2;

                    // Direction from circumcenter to midpoint
                    float dx = mx - center.X;
                    float dy = my - center.Y;
                    float len = (float)Math.Sqrt(dx * dx + dy * dy);

                    if (len == 0) continue; // prevent division by zero

                    float dirX = dx / len;
                    float dirY = dy / len;

                    // Step size and starting point
                    float step = 5f;
                    PointF current = center;

                    // Move in direction from center toward midpoint and beyond, until out of bounds
                    while (current.X >= 0 && current.X <= width &&
                           current.Y >= 0 && current.Y <= height)
                    {
                        PointF next = new PointF(current.X + dirX * step, current.Y + dirY * step);
                        g.DrawLine(Pens.Green, current, next);
                        current = next;
                    }
                }
            }
            #endregion







        }
        public static PointF Circumcenter(PointF A, PointF B, PointF C)
        {
            // Coordonate
            float x1 = A.X, y1 = A.Y;
            float x2 = B.X, y2 = B.Y;
            float x3 = C.X, y3 = C.Y;

            // Determinanti
            float D = 2 * (x1 * (y2 - y3) +
                           x2 * (y3 - y1) +
                           x3 * (y1 - y2));

            if (D == 0)
                throw new ArgumentException("Punctele sunt coliniare - nu exista un cerc circumscris unic.");

            // Coordonatele centrului cercului
            float Ux = ((x1 * x1 + y1 * y1) * (y2 - y3) +
                        (x2 * x2 + y2 * y2) * (y3 - y1) +
                        (x3 * x3 + y3 * y3) * (y1 - y2)) / D;

            float Uy = ((x1 * x1 + y1 * y1) * (x3 - x2) +
                        (x2 * x2 + y2 * y2) * (x1 - x3) +
                        (x3 * x3 + y3 * y3) * (x2 - x1)) / D;

            return new PointF(Ux, Uy);
        }
    }
}
